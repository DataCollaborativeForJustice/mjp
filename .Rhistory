horiz=TRUE, fill=colors, cex=1.25)
}
## Adam's code ####
barplot(table(sqf$city), main="Number of Stops by Borough", ylab="Stops", xlab="Borough",
col=colors)
box()
plot(density(as.numeric(sqf_16$stop_datetime)), main="Density Plot",xlab="Date",xaxt="n")
axis.POSIXct(1, at=seq(daterange[1], daterange[2], by="month"), format="%b %y")
plot(as.numeric(sqf$age), (sqf$height),xlab="Age",
ylab="Height (in.)", main="Height vs. Age")
abline(lm((height) ~ as.numeric(age) , data = sqf), col="blue")
plot(as.numeric(sqf$age), (sqf$height),xlab="Age",
ylab="Height (in.)", main="Height vs. Age",col=sqf$city,pch=16)
legend("topright", legend=levels(sqf$city), col=c(1:5),pch=16,cex=.75)
layout(matrix(c(1,2,3,4,5,6,6,6,6,6),ncol=5,byrow=TRUE), heights=c(12,1))
par(mar=c(1,4,5,1))
for (i in 1:5) {
barplot(prop.table(table(sqf[sqf$city == levels(sqf$city)[i], "race/ethnicity"])),
ylab="Stops",xaxt="n",col=colors,main=levels(sqf$city)[i],ylim=c(0,.65))
box()
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", title="Race/Ethnicity", legend=levels(sqf[,"race/ethnicity"]),
horiz=TRUE, fill=colors, cex=1.25)
histogram(
sqf_16$city,
type = "count",
xlab = "Borough" ,
ylab = "Stops",
col = c("red", "blue" , "green", "orange", "purple"),
main = "Number of Stops by Borough"
)
densityplot( ~ as.numeric(sqf_16$stop_datetime),
sacles = list(x = list( format = "%y-%m")),
xlab = "Date" ,
main = "Density Plot"
)
xyplot(
(ht_feet * 12 + ht_inch) ~ as.numeric(as.character(age)),
data = sqf_16 ,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
},
xlab = "Age" ,
ylab = "Height (in.)",
main = "Height vs. Age",
auto.key = list(space = "right")
)
xyplot((ht_feet * 12 + ht_inch) ~ as.numeric(as.character(age)),
data = sqf_16 ,
group = city,
xlab = "Age",
ylab = "Height (in.)",
main = "Height vs. Age",
scales = list(
x = list(
at = round(seq(
min(as.numeric(sqf_16$age)),
max(as.numeric(sqf_16$age)),
length.out = 20)))),
auto.key = list(space = "right")
)
histogram(~ `race/ethnicity`  | city ,
data = sqf,
scales = list(y = list(rot = 45), x = list(rot = 45)))
ggplot(data = sqf_16) +
geom_bar(aes(x = city, fill = city), stat = "count") +
labs(title = "Stop, question and frisk count by borough",
x = "Borough",
y = "Count")
ggplot(data = sqf_16) +
geom_density(aes(x =stop_datetime))+
labs(title = "Stop, question and frisk seasonal trend",
x = "Borough",
y = "Count")
ggplot(data = sqf_16, aes(x = as.numeric(age) , y = (ht_feet * 12 + ht_inch)))+
geom_point()+
geom_smooth(method = "lm")+
labs(title = "Age and height of the people stopped by police with regression line",
x = "Age",
y = "Height in inches")
ggplot(data = sqf_16) +
geom_point(aes(
x = as.numeric(age),
y = (sqf_16$ht_feet * 12 + sqf_16$ht_inch) ,
color = city
)) +
labs(title = "Age and height of the people stopped by police, by brough",
x = "Age",
y = "Height in inches",
fill = "Borough")
ggplot(data = sqf) +
geom_bar(aes(x = `race/ethnicity` ,
y = ..count../tapply(..count..,..PANEL..,sum), fill = `race/ethnicity`) , stat = "count") +
facet_grid(. ~ city) +
labs(title = "Age and height of the people stopped by police, by brough",
x = "Age",
y = "Percentage") +
theme(axis.text.x=element_text(angle=60, hjust=1), legend.position = "none")
ggplot(data = sqf) +
geom_bar(aes(x = `race/ethnicity` ,
y = ..count../tapply(..count..,..PANEL..,sum)[..PANEL..], fill = `race/ethnicity`) , stat = "count") +
facet_grid(. ~ city) +
labs(title = "Age and height of the people stopped by police, by brough",
x = "Age",
y = "Percentage") +
theme(axis.text.x=element_text(angle=60, hjust=1), legend.position = "none")
histogram(~ `race/ethnicity`  | city ,
data = sqf,
col = c("red", "blue" , "green", "orange", "purple")
scales = list(y = list(rot = 45), x = list(rot = 45)))
histogram(~ `race/ethnicity`  | city ,
data = sqf,
col = c("red", "blue" , "green", "orange", "purple"),
scales = list(y = list(rot = 45), x = list(rot = 45)))
barchart(
sqf_16$city,
type = "count",
xlab = "Borough" ,
ylab = "Stops",
col = c("red", "blue" , "green", "orange", "purple"),
main = "Number of Stops by Borough"
)
barchart(~ `race/ethnicity`  | city ,
data = sqf,
col = c("red", "blue" , "green", "orange", "purple"),
scales = list(y = list(rot = 45), x = list(rot = 45)))
histogram(
sqf_16$city,
type = "count",
xlab = "Borough" ,
ylab = "Stops",
col = c("red", "blue" , "green", "orange", "purple"),
main = "Number of Stops by Borough"
)
library(data.table)
library(lattice)
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(tools)
library(gridExtra)
library(scales)
library(RSocrata)
library(shiny)
library(plotly)
## data loading and for Richie's code ####
sqf_16 <-
fread(".\\Raw Data SQF 2016\\sqf-2016.csv", stringsAsFactors = F)
sqf_16 <- sqf_16[!is.na(year),]
sqf_16 <- data.table(sqf_16, stringsAsFactors = T)
fun_resharp_stoptime <-
function(x) {
if (nchar(x) == 3) {
x <- paste0("0", x)
}
else if (nchar(x) == 2) {
x <- paste0("00", x)
}
else if (nchar(x) == 1) {
x <- paste0("000", x)
}
return(x)
}
sqf_16$timestop_RC <-
sapply(as.character(sqf_16$timestop), fun_resharp_stoptime)
sqf_16$stop_datetime <-
ymd_hm(paste0(
substr(
sqf_16$datestop,
nchar(sqf_16$datestop) - 3 ,
nchar(sqf_16$datestop)
),
"-",
substr(sqf_16$datestop, 1, nchar(sqf_16$datestop) - 6),
"-",
substr(
sqf_16$datestop,
nchar(sqf_16$datestop) - 5 ,
nchar(sqf_16$datestop) - 4
),
" ",
substr(sqf_16$timestop_RC, 1 , 2),
":",
substr(sqf_16$timestop_RC, 3 , 4)
),
tz = "America/New_York")
sqf_16[,race_ethn_rc := as.factor(race) ]
levels(sqf_16$race_ethn_rc) <- c("Asian","NH Black", "Other", "Hispanic", "Hispanic", "Unknown",  "NH White","Other" )
## Quinn's code ####
sqf<- read.csv(".\\Raw Data SQF 2016\\sqf-2016.csv", na.strings = " ")
sqf<- sqf[! is.na(sqf$city),]
sqf[,"race/ethnicity"] <- NA
sqf[,"race/ethnicity"][which(sqf$race == "A")] <- "Asian"
sqf[,"race/ethnicity"][which(sqf$race == "B")] <- "NH Black"
sqf[,"race/ethnicity"][which(sqf$race == "W")] <- "NH White"
sqf[,"race/ethnicity"][which(sqf$race == "P")] <- "Hispanic"
sqf[,"race/ethnicity"][which(sqf$race == "Q")] <- "Hispanic"
sqf[,"race/ethnicity"][which(sqf$race == "Z")] <- "Other"
sqf[,"race/ethnicity"][which(sqf$race == "I")] <- "Other"
sqf[,"race/ethnicity"] <- factor(sqf[,"race/ethnicity"])
colors <- c("red3","blue3","green3","orange3","purple3")
sqf$height <- 12*sqf$ht_feet + sqf$ht_inch
daterange=c(as.POSIXlt(min(sqf_16$stop_datetime)),as.POSIXlt(max(sqf_16$stop_datetime)))
stacked.bar <- function(var1, var2, ylabel=NULL, xlabel=NULL, ylim=NULL) {
# Setup graph layout
layout(matrix(c(1,2,3,3),ncol=2,byrow=TRUE), heights=c(8,1))
# Initialize colors and tables
colors <- brewer.pal(nlevels(sqf[,var1]),"Set1")
sqf.table.num <- table(sqf[,var1], sqf[,var2])
sqf.table.perc <- prop.table(sqf.table.num,2)*100
ns <- trimws(format(colSums(sqf.table.num),big.mark=","))
# Set margins
par(mai=c(1.0,1.0,1.0,0.5))
# Set y-limit for number graph
ylim <- max(colSums(sqf.table.num)*1.05)
# Create title
title.num <- paste("Number of Stops by", toTitleCase(var1), "and", toTitleCase(var2))
# Create graph
bp <- barplot(sqf.table.num, col=colors,ylim=c(0,ylim),cex.names=1,
cex.axis=1.25)
# Add x-label, y-label, and title to graph
mtext(title.num, side=3, line=1, font=2)
mtext("Number of Stops", side=2, line=3, font=2)
mtext("Borough", side=1, line=3, font=2)
# Add total numbers to top of graph
text(bp,colSums(sqf.table.num),labels=ns, pos=3, font=2)
box()
# Create title
title.perc <- paste("Percent of Stops by", toTitleCase(var1), "and", toTitleCase(var2))
# Create graph
bp <- barplot(sqf.table.perc, col=colors, ylim=c(0,110),
cex.names=1,cex.axis=1.25)
# Add x-label, y-label, and title to graph
mtext(title.perc, side=3, line=1, font=2)
mtext("Percent of Stops", side=2, line=3, font=2)
mtext("Borough", side=1, line=3, font=2)
# Create y-values for where text will appear
ys <- apply(sqf.table.perc,2,  cumsum) - sqf.table.perc/2
# Add percent text into graph
text(bp[4],ys[1,4],labels=round(sqf.table.perc[1,4],1),font=2, col = "white")
text(bp,ys[2,],labels=round(sqf.table.perc[2,],1),font=2, col = "white")
text(bp,ys[3,],labels=round(sqf.table.perc[3,],1),font=2, col = "white")
text(bp,ys[4,],labels=round(sqf.table.perc[4,],1),font=2, col = "white")
box()
# Add title for both figures
mtext("Stop, Question, and Frisk: 2016", outer=TRUE, line=-3, cex=1.5, font=2)
par(mai=c(0,0,0,0))
plot.new()
# Create legend
legend(x="center", title=toTitleCase(var1), legend=levels(sqf[,var1]),
horiz=TRUE, fill=colors, cex=1.25)
}
## Adam's code ####
barchart(
sqf_16$city,
type = "count",
xlab = "Borough" ,
ylab = "Stops",
col = c("red", "blue" , "green", "orange", "purple"),
main = "Number of Stops by Borough"
)
barchart(~ `race/ethnicity`  | city ,
data = sqf,
col = c("red", "blue" , "green", "orange", "purple"),
scales = list(y = list(rot = 45), x = list(rot = 45)))
barchart(~ as.factor(`race/ethnicity`)  | city ,
data = sqf,
col = c("red", "blue" , "green", "orange", "purple"),
scales = list(y = list(rot = 45), x = list(rot = 45)))
barchart(~ table(`race/ethnicity`)  | city ,
data = sqf,
col = c("red", "blue" , "green", "orange", "purple"),
scales = list(y = list(rot = 45), x = list(rot = 45)))
library(data.table)
library(lattice)
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(tools)
library(gridExtra)
library(scales)
library(RSocrata)
library(shiny)
library(plotly)
## data loading and for Richie's code ####
sqf_16 <-
fread("./Raw Data SQF 2016/sqf-2016.csv", stringsAsFactors = F)
sqf_16 <- sqf_16[!is.na(year),]
sqf_16 <- data.table(sqf_16, stringsAsFactors = T)
fun_resharp_stoptime <-
function(x) {
if (nchar(x) == 3) {
x <- paste0("0", x)
}
else if (nchar(x) == 2) {
x <- paste0("00", x)
}
else if (nchar(x) == 1) {
x <- paste0("000", x)
}
return(x)
}
sqf_16$timestop_RC <-
sapply(as.character(sqf_16$timestop), fun_resharp_stoptime)
sqf_16$stop_datetime <-
ymd_hm(paste0(
substr(
sqf_16$datestop,
nchar(sqf_16$datestop) - 3 ,
nchar(sqf_16$datestop)
),
"-",
substr(sqf_16$datestop, 1, nchar(sqf_16$datestop) - 6),
"-",
substr(
sqf_16$datestop,
nchar(sqf_16$datestop) - 5 ,
nchar(sqf_16$datestop) - 4
),
" ",
substr(sqf_16$timestop_RC, 1 , 2),
":",
substr(sqf_16$timestop_RC, 3 , 4)
),
tz = "America/New_York")
sqf_16[,race_ethn_rc := as.factor(race) ]
levels(sqf_16$race_ethn_rc) <- c("Asian","NH Black", "Other", "Hispanic", "Hispanic", "Unknown",  "NH White","Other" )
## Quinn's code ####
sqf<- read.csv("./Raw Data SQF 2016/sqf-2016.csv", na.strings = " ")
sqf<- sqf[! is.na(sqf$city),]
sqf[,"race/ethnicity"] <- NA
sqf[,"race/ethnicity"][which(sqf$race == "A")] <- "Asian"
sqf[,"race/ethnicity"][which(sqf$race == "B")] <- "NH Black"
sqf[,"race/ethnicity"][which(sqf$race == "W")] <- "NH White"
sqf[,"race/ethnicity"][which(sqf$race == "P")] <- "Hispanic"
sqf[,"race/ethnicity"][which(sqf$race == "Q")] <- "Hispanic"
sqf[,"race/ethnicity"][which(sqf$race == "Z")] <- "Other"
sqf[,"race/ethnicity"][which(sqf$race == "I")] <- "Other"
sqf[,"race/ethnicity"] <- factor(sqf[,"race/ethnicity"])
colors <- c("red3","blue3","green3","orange3","purple3")
sqf$height <- 12*sqf$ht_feet + sqf$ht_inch
daterange=c(as.POSIXlt(min(sqf_16$stop_datetime)),as.POSIXlt(max(sqf_16$stop_datetime)))
stacked.bar <- function(var1, var2, ylabel=NULL, xlabel=NULL, ylim=NULL) {
# Setup graph layout
layout(matrix(c(1,2,3,3),ncol=2,byrow=TRUE), heights=c(8,1))
# Initialize colors and tables
colors <- brewer.pal(nlevels(sqf[,var1]),"Set1")
sqf.table.num <- table(sqf[,var1], sqf[,var2])
sqf.table.perc <- prop.table(sqf.table.num,2)*100
ns <- trimws(format(colSums(sqf.table.num),big.mark=","))
# Set margins
par(mai=c(1.0,1.0,1.0,0.5))
# Set y-limit for number graph
ylim <- max(colSums(sqf.table.num)*1.05)
# Create title
title.num <- paste("Number of Stops by", toTitleCase(var1), "and", toTitleCase(var2))
# Create graph
bp <- barplot(sqf.table.num, col=colors,ylim=c(0,ylim),cex.names=1,
cex.axis=1.25)
# Add x-label, y-label, and title to graph
mtext(title.num, side=3, line=1, font=2)
mtext("Number of Stops", side=2, line=3, font=2)
mtext("Borough", side=1, line=3, font=2)
# Add total numbers to top of graph
text(bp,colSums(sqf.table.num),labels=ns, pos=3, font=2)
box()
# Create title
title.perc <- paste("Percent of Stops by", toTitleCase(var1), "and", toTitleCase(var2))
# Create graph
bp <- barplot(sqf.table.perc, col=colors, ylim=c(0,110),
cex.names=1,cex.axis=1.25)
# Add x-label, y-label, and title to graph
mtext(title.perc, side=3, line=1, font=2)
mtext("Percent of Stops", side=2, line=3, font=2)
mtext("Borough", side=1, line=3, font=2)
# Create y-values for where text will appear
ys <- apply(sqf.table.perc,2,  cumsum) - sqf.table.perc/2
# Add percent text into graph
text(bp[4],ys[1,4],labels=round(sqf.table.perc[1,4],1),font=2, col = "white")
text(bp,ys[2,],labels=round(sqf.table.perc[2,],1),font=2, col = "white")
text(bp,ys[3,],labels=round(sqf.table.perc[3,],1),font=2, col = "white")
text(bp,ys[4,],labels=round(sqf.table.perc[4,],1),font=2, col = "white")
box()
# Add title for both figures
mtext("Stop, Question, and Frisk: 2016", outer=TRUE, line=-3, cex=1.5, font=2)
par(mai=c(0,0,0,0))
plot.new()
# Create legend
legend(x="center", title=toTitleCase(var1), legend=levels(sqf[,var1]),
horiz=TRUE, fill=colors, cex=1.25)
}
## Adam's code ####
ggplot(data = sqf_16, aes(x = as.numeric(as.character(age)) , y = (ht_feet * 12 + ht_inch)))+
geom_point()+
geom_smooth(method = "lm")+
labs(title = "Age and height of the people stopped by police with regression line",
x = "Age",
y = "Height in inches")
ggplot(data = sqf_16) +
geom_point(aes(
x = as.numeric(as.character(age)),
y = (sqf_16$ht_feet * 12 + sqf_16$ht_inch) ,
color = city
)) +
labs(title = "Age and height of the people stopped by police, by brough",
x = "Age",
y = "Height in inches",
fill = "Borough")
plot(as.numeric(as.character(sqf$age)), (sqf$height),xlab="Age",
ylab="Height (in.)", main="Height vs. Age")
abline(lm((height) ~ as.numeric(age) , data = sqf), col="blue")
install.packages("devtools")
devtools::install_github("richielin/mjp")
library(devtools)
devtools::install_github("richielin/mjp")
library(mjp)
freqsum(iris$Species)
library(mjp)
devtools::install_github("richielin/mjp")
library("mjp", lib.loc="C:/Program Files/R/R-3.4.0/library")
freqsum(iris$Species)
devtools::install_github("richielin/mjp")
library(mjp)
?freqsum
mtcars
names(mtcars)
rownames(mtcars)
rownames(mtcars)
data.frame(cars = rownames(mtcars), cyl = mtcars$cyl)
ref_table <- data.frame(cars = rownames(mtcars), cyl = mtcars$cyl)
ref_table
fun_logic_assg <- function(x , reference, typo_col = "TYPO", replace_col = "REPLACEMENT"){
#Count the initial NAs or blanks
nas <- sum(x =="" | is.na(x))
#Replace the blanks with NA
x[x ==""] <- NA
#Match the value in the column, return the replacement into a variable "output"
output <- reference[match(x, reference[,typo_col]),replace_col]
#Count the non-matched values, which was not NA initially but turned into NA after matching
invs<- length(output[!is.na(x) & is.na(output)])
#Pop warning message, string those pieces into one sentence
warning(paste0(invs," values cannot be matched, about " ,round(invs / length(x) *100,2),"% , saved in the variable 'no_match'.  there are ", nas, " values are initially empty."))
#Assign the non-matched values into a global environment variable for future usage.
no_match <<- unique(x[!is.na(x) & is.na(output)])
#return the placement column.
return(output)
}
ref_table_path <- file.choose(default = ".csv")
choose.files(default = ".csv")
ref_table_path <- choose.files(default = ".csv")
write.csv(ref_table, ref_table_path, row.names = F)
fun_logic_assg(names(mtcars) , ref_table_path, typo_col = "cars", replace_col = "cyl")
names(mtcars)
fun_logic_assg(rownames(mtcars) , ref_table_path, typo_col = "cars", replace_col = "cyl")
x <- ref_table
x <- rownames(mtcars)
reference <- ref_table
typo_col <- "cars"
x <- rownames(mtcars)
reference <- ref_table
typo_col <- "cars"
replace_col <- "cyl"
reference[match(x, reference[,typo_col]),replace_col]
fun_logic_assg <- function(x , reference, typo_col = "TYPO", replace_col = "REPLACEMENT"){
#Count the initial NAs or blanks
nas <- sum(x =="" | is.na(x))
#Replace the blanks with NA
x[x ==""] <- NA
#Match the value in the column, return the replacement into a variable "output"
output <- reference[match(x, reference[,typo_col]),replace_col]
#Count the non-matched values, which was not NA initially but turned into NA after matching
invs<- length(output[!is.na(x) & is.na(output)])
#Pop warning message, string those pieces into one sentence
warning(paste0(invs," values cannot be matched, about " ,round(invs / length(x) *100,2),"% , saved in the variable 'no_match'.  there are ", nas, " values are initially empty."))
#Assign the non-matched values into a global environment variable for future usage.
no_match <<- unique(x[!is.na(x) & is.na(output)])
#return the placement column.
return(output)
}
fun_logic_assg( rownames(mtcars), ref_table_path, typo_col = "cars", replace_col = "cyl")
fun_logic_assg <- function(x , reference, typo_col = "TYPO", replace_col = "REPLACEMENT"){
#Count the initial NAs or blanks
nas <- sum(x =="" | is.na(x))
#Replace the blanks with NA
x[x ==""] <- NA
#Match the value in the column, return the replacement into a variable "output"
output <- reference[match(x, reference[,typo_col]),replace_col]
#Count the non-matched values, which was not NA initially but turned into NA after matching
invs<- length(output[!is.na(x) & is.na(output)])
#Pop warning message, string those pieces into one sentence
warning(paste0(invs," values cannot be matched, about " ,round(invs / length(x) *100,2),"% , saved in the variable 'no_match'.  there are ", nas, " values are initially empty."))
#Assign the non-matched values into a global environment variable for future usage.
no_match <<- unique(x[!is.na(x) & is.na(output)])
#return the placement column.
return(output)
}
fun_logic_assg(rownames(mtcars) , ref_table_path, typo_col = "cars", replace_col = "cyl")
ref_table <- data.frame(cars = rownames(mtcars), cyl = mtcars$cyl)
ref_table_path <- choose.files(default = ".csv")
ref_table_path <- choose.files(default = ".csv")
fun_logic_assg(rownames(mtcars) , ref_table_path, typo_col = "cars", replace_col = "cyl")
fun_logic_assg(rownames(mtcars) , ref_table, typo_col = "cars", replace_col = "cyl")
setwd(choose.dir())
library(devtools)
devtools::document()
devtools::install_github("richielin/mjp")
devtools::install_github("richielin/mjp")
devtools::document()
devtools::document()
